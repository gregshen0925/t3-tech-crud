import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { useState } from "react";

const TechComponent = () => {
  const { data: Logos } = trpc.example.getLogo.useQuery();
  return (
    <div className="mt-3 grid gap-3 pt-3 text-center text-white md:grid-cols-3 lg:w-2/3">
      <p>{Logos?.join(", ")}</p>
    </div>
  );
};

const AddTechButton = () => {
  const [techName, setTechName] = useState<string>();
  const { mutate } = trpc.example.addTech.useMutation();
  const handleAddTech = () => {
    if (!(typeof techName === "string")) {
      return;
    } else {
      mutate({
        technology: techName,
      });
    }
  };
  return (
    <div className="flex">
      <input
        className="rounded-lg border-2 border-black"
        type="text"
        onChange={(e) => {
          setTechName(e.target.value);
        }}
      />
      <button
        className="rounded-lg bg-green-300 px-2 py-2 text-white"
        onClick={handleAddTech}
      >
        Add Tech
      </button>
    </div>
  );
};

const DeleteAllButton = () => {
  const { mutate } = trpc.example.deleteTech.useMutation();
  const handleDeleteAll = () => {
    mutate();
  };
  return (
    <button
      className="rounded-lg bg-[#e01212] px-2 py-2 text-white"
      onClick={handleDeleteAll}
    >
      Delete Button
    </button>
  );
};

const Home: NextPage = () => {
  const { data, isLoading, isError } = trpc.example.hello.useQuery(
    { text: "from tRPC" },
    { refetchOnWindowFocus: false }
  );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          Create <span className="text-purple-300">T3</span> App
        </h1>
        <p className="text-2xl text-gray-700">This stack uses:</p>
        <TechComponent />
        <AddTechButton />
        <DeleteAllButton />

        <div className="flex w-full items-center justify-center pt-6 text-2xl text-blue-500">
          {data ? (
            <p>
              {data.greeting}
              {data.date.toLocaleDateString("es-AR")}
            </p>
          ) : (
            <p>Loading..</p>
          )}
        </div>
        <AuthShowcase />
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <p className="text-2xl text-blue-500">
          Logged in as {sessionData?.user?.name}
        </p>
      )}
      {secretMessage && (
        <p className="text-2xl text-blue-500">{secretMessage}</p>
      )}
      <button
        className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard: React.FC<TechnologyCardProps> = ({
  name,
  description,
  documentation,
}) => {
  return (
    <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <Link
        className="m-auto mt-3 w-fit text-sm text-violet-500 underline decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </Link>
    </section>
  );
};
